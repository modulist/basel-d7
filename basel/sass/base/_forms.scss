
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  min-width: 0;
}

legend {
  border: 0;
  border-bottom: 1px solid #eee;
  color: $header-text;
  display: block;
  font-size: ($form-input-font-size);
  line-height: inherit;
  margin-bottom: $form-line-height;
  padding: 0;
  width: 100%;
}

label {
  display: inline-block;
  font-size: $form-label-font-size;
  margin-bottom: 5px;
  max-width: 100%; // Force IE8 to wrap long content
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

/* // Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}*/

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: ($font-size-base/3) 0;
  margin-top: 1px \9; // IE8-9
  line-height: $form-line-height; //[CHECK] normal in bootstrap;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
  font-family: $font-family-base;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Adjust output element
output {
  color: $form-input-text;
  display: block;
  //padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $form-line-height;
}

// form elements
input,
button,
select,
textarea {
  margin: 0;
  vertical-align: middle;
}
/*textarea,*/
input[type="color"],
input[type="date"],
input[type="datetime"],
input[type="datetime-local"],
input[type="email"],
input[type="month"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="time"],
input[type="url"],
input[type="week"],
select,
textarea,
.form-control {
  border-radius: 4px;
  background: $form-input-bg;
  background-clip: padding-box;
  background-image: none; 
  background-text: lighten($form-input-text, 20%);
  border: none;
  border-radius: $form-input-radius;
  color: $form-input-text;
  font-size: $form-input-font-size;
  line-height: $form-line-height;
  max-width: 30em;
  outline: 0;
  padding: $form-input-padding;
  width: 100%;
  //@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  //@include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);


  // Placeholder
  @include placeholder;

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    // cursor: $cursor-disabled; [CHECK]
    background-color: $form-input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. 
input[type="search"] {
  -webkit-appearance: none;
}

.form-group {
  display: block;  // [CHECK]
  margin-bottom: $font-size-base;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    //min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 1px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
/*input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }
}
*/

label {
  display: block; //[CHECK] inline-block in Bootstrap
  margin-bottom: .25em;
  max-width: 30em;
  //width: 100%;
}

textarea.form-control {
  height:auto
}


input:focus {
  background: $form-input-bg-hover;
  color: $form-input-text;
  outline:none;
}

.form-item label,
.form-actions label {
  font-weight: normal;
  margin: 1em 0 0.25em;
}

detail {
  border: 1px solid $translucent-grey;
  &:focus {
    border: 1px solid $translucent-grey;
  }
}
.form-inline {
  @media(min-width: 768px) {
      // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: $font-size-base;
      vertical-align: middle;
    }
  
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }
  
    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }
  
    .input-group {
      display: inline-table;
      vertical-align: middle;
  
      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }
    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }
  
    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }
  
    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox,
    button {
      display: inline-block;
      margin-top: 0;
      margin-bottom: $font-size-base;
      vertical-align: middle;
  
      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }
  
    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($body-text, 25%); // lighten the text some for contrast
}


/*
// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    //padding-top: ($padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    //min-height: ($line-height-computed + ($padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row;
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: 768px) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      //padding-top: ($padding-base-vertical + 1); // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    //right: ($grid-gutter-width / 2);
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: 768px) {
      .control-label {
        //padding-top: (($padding-large-vertical * $line-height-large) + 1);
      }
    }
  }
  .form-group-sm {
    @media (min-width: $screen-sm-min) {
      .control-label {
        //padding-top: ($padding-small-vertical + 1);
      }
    }
  }
}
*/

/*.input-group {
  border-collapse: separate;
  display: table;
  position: relative;
  &.col {
    float:none;
    padding-right: 0;
    padding-left: 0;
  }
  .form-control {
    margin-bottom: 0;
    width:100%;
  }
}
.input-group-lg {
  > .form-control, 
  > .input-group-addon,
  > .input-group-btn > .btn {
    height:45px;
    padding:10px 16px;
    font-size:18px;
    line-height:1.33;
    border-radius:6px;
  }
}
.input-group-addon {
  background-color: #eee;
  border: 1px solid #ccc;
  border-radius: 4px;
  color: #555;
  line-height: 1;
  padding: 6px 12px;
  text-align: center;
  &:first-child {
    border-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
  &:left-child {
    border-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}
*/

